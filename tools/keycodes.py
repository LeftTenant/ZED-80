
# Reads a string of key codes and generates code for them.

import sys

SCAN_CODES = """
0E	F0 0E	`
16	F0 16	1
1E	F0 1E	2
26	F0 26	3
25	F0 25	4
2E	F0 2E	5
36	F0 36	6
3D	F0 3D	7
3E	F0 3E	8
46	F0 46	9
45	F0 45	0
4E	F0 4E	-
55	F0 55	=
66	F0 66	backspace
0D	F0 0D	tab
15	F0 15	q
1D	F0 1D	w
24	F0 24	e
2D	F0 2D	r
2C	F0 2C	t
35	F0 35	y
3C	F0 3C	u
43	F0 43	i
44	F0 44	o
4D	F0 4D	p
54	F0 54	[
5B	F0 5B	]
58	F0 58	caps lock
1C	F0 1C	a
1B	F0 1B	s
23	F0 23	d
2B	F0 2B	f
34	F0 34	g
33	F0 33	h
3B	F0 3B	j
42	F0 42	k
4B	F0 4B	l
4C	F0 4C	;
52	F0 52	'
5A	F0 5A	enter
12	F0 12	left shift
1A	F0 1A	z
22	F0 22	x
21	F0 21	c
2A	F0 2A	v
32	F0 32	b
31	F0 31	n
3A	F0 3A	m
41	F0 41	,
49	F0 49	.
4A	F0 4A	/
59	F0 59	right shift
14	F0 14	left ctrl
11	F0 11	left alt
29	F0 29	spacebar
E0 11	E0 F0 11	right alt
E0 14	E0 F0 14	right ctrl
E0 70	E0 F0 70	insert
E0 71	E0 F0 71	delete
E0 6B	E0 F0 6B	left
E0 6C	E0 F0 6C	home
E0 69	E0 F0 69	end
E0 75	E0 F0 75	up
E0 72	E0 F0 72	down
E0 7D	E0 F0 7D	page Up
E0 7A	E0 F0 7A	page Down
E0 74	E0 F0 74	right
77	F0 77	num lock
6C	F0 6C	keypad 7
6B	F0 6B	keypad 4
69	F0 69	keypad 1
E0 4A	E0 F0 4A	keypad /
75	F0 75	keypad 8
73	F0 73	keypad 5
72	F0 72	keypad 2
70	F0 70	keypad 0
7C	F0 7C	keypad *
7D	F0 7D	keypad 9
74	F0 74	keypad 6
7A	F0 7A	keypad 3
71	F0 71	keypad .
7B	F0 7B	keypad -
79	F0 79	keypad +
E0 5A	E0 F0 5A	keypad enter
76	F0 76	escape
05	F0 05	f1
06	F0 06	f2
04	F0 04	f3
0C	F0 0C	f4
03	F0 03	f5
0B	F0 0B	f6
83	F0 83	f7
0A	F0 0A	f8
01	F0 01	f9
09	F0 09	f10
78	F0 78	f11
07	F0 07	f12
E0 12 E0 7C	E0 F0 7C E0 F0 12	print screen
7E	F0 7E	scroll lock
E1 14 77 E1	F0 14 F0 77	pause break
5D	F0 5D	backslash
"""

# Mac key codes.
KEY_CODES = """
a 0
s 1
d 2
f 3
h 4
g 5
z 6
x 7
c 8
v 9

b 11
q 12
w 13
e 14
r 15
y 16
t 17
1 18
2 19
3 20
4 21
6 22
5 23
= 24
9 25
7 26
- 27
8 28
0 29
] 30
o 31
u 32
[ 33
i 34
p 35
enter 36
l 37
j 38
' 39
k 40
; 41
/ 42
, 43
backslash 44
n 45
m 46
. 47
tab 48

` 50
delete 51

escape 53

command 55
shift 56
capslock 57
option 58
control 59

up 126
down 125
left 123
right 124
"""

# Converts a string like "F0 7E" to a list of integers.
def parse_codes(codes):
    return [int(n, 16) for n in codes.split(" ")]

class Key:
    def __init__(self, name, press_codes, release_codes):
        self.name = name
        self.press_codes = press_codes
        self.release_codes = release_codes
        self.mac_key_code = -1

    def __str__(self):
        return "%s: (%s) (%s)" % (self.name, self.press_codes, self.release_codes)

def main():
    # Map from key description to Key object.
    key_map = {}

    # Parse scan codes.
    for line in SCAN_CODES.split("\n"):
        line = line.strip()
        if line:
            fields = line.split("\t")
            if len(fields) != 3:
                print("Error: This scan code line does not have three fields: " + line)
                sys.exit(1)

            press_codes = parse_codes(fields[0])
            release_codes = parse_codes(fields[1])
            key_map[fields[2]] = Key(fields[2], press_codes, release_codes)

    # Parse key codes.
    for line in KEY_CODES.split("\n"):
        line = line.strip()
        if line:
            fields = line.split(" ")
            if len(fields) != 2:
                print("Error: This key code line does not have two fields: " + line)
                sys.exit(1)

            name, key_code = fields
            key = key_map.get(name)
            if key == None:
                print("Warning: Key \"%s\" does not have a scan code" % name)
            else:
                key.mac_key_code = int(key_code)

    # Check for problems.
    for key in key_map.values():
        if key.mac_key_code == -1:
            print("Warning: Key \"%s\" does not have a Mac key code" % key.name)

    # Sort the keys so that the output is consistent across runs.
    keys = sorted(key_map.values(), key=lambda key: key.mac_key_code)

    # Generate Objective-C lookup table for key-code-to-scan-code.
    f = open("../emulator/gui/KeycodeMap.h", "w")
    f.write("// This file is automatically generated by keycodes.py. Do not modify.\n\n")

    f.write("// Map from MacOS key code to PS/2 press scan code sequence.\n")
    f.write("NSDictionary *g_KeyPressScanCodes = @{\n")
    for key in keys:
        if key.mac_key_code != -1:
            f.write("    @%d: @[%s], // %s\n" %
                    (key.mac_key_code, ", ".join("@0x%02x" % n for n in key.press_codes),
                        key.name))
    f.write("};\n\n")

    f.write("// Map from MacOS key code to PS/2 release scan code sequence.\n")
    f.write("NSDictionary *g_KeyReleaseScanCodes = @{\n")
    for key in keys:
        if key.mac_key_code != -1:
            f.write("    @%d: @[%s], // %s\n" %
                    (key.mac_key_code, ", ".join("@0x%02x" % n for n in key.release_codes),
                        key.name))
    f.write("};\n")

    f.close()


if __name__ == "__main__":
    if sys.version_info.major != 3:
        sys.stderr.write("Must run with Python 3.\n")
        sys.exit(1)
    main()
