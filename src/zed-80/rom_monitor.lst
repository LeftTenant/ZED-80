                        ; --------------------------------------
                        ; zasm: assemble "rom_monitor.asm"
                        ; date: 2019-04-29 18:14:21
                        ; --------------------------------------


                        ; Calling convention used in this program
                        ; ---------------------------------------
                        ;
                        ; Unless otherwise noted, the first parameter, and the return value are stored as follows:
                        ; 8 bits: L
                        ; 16 bits: HL
                        ; 32 bits: DEHL
                        ;
                        ; Additional parameters are passed on the stack, left-to-right.
                        ; Parameters and return values larger than 32 bits are passed on the stack (return value
                        ; space set up by caller as a hidden first argument).
                        ; Callee saves/restores any modified registers.
                        ; Caller pops arguments after call returns.
                        ; AF registers are scratch (caller preserves, if needed).
                        
                        ; same as 'bin', except that the default fill byte for 'defs' etc. is 0xff
                        #target rom
                        
                        #include "z80.inc"
                        ; Macros and definitions related to the Z80 and its instruction set
                        
                        M_deref_hl	macro
                            ; hl = (hl)
                            ; destroys a
                            ld	    a, (hl)
                            inc	    hl
                            ld	    h, (hl)
                            ld	    l, a
                            endm
                        #include "sysreg.inc"
0070:                   PORT_SYSREG	    equ 0x70		; port address for system control register (U23)
                        
                        ; These values are the bit masks.
0001:                   SYS_MMUEN	    equ 0x01		; MMU enable
0002:                   SYS_SDCLK	    equ 0x02		; SD card input register & card clock
0004:                   SYS_SDCS	    equ 0x04		; SD card chip select (active low)
0008:                   SYS_SDICLR	    equ 0x08		; SD card input register clear (active low)
0010:                   SYS_SDOCLK	    equ 0x10		; SD card output register clock
0020:                   SYS_BDIR	    equ 0x20		; Audio chip BDIR line (bus direction)
0040:                   SYS_BC1		    equ 0x40		; Audio chip BC1 line (bus control 1)
0080:                   SYS_RESERVED	    equ 0x80		; Reserved for future use
                        
                        ; These are the bit numbers (usefil for bit, set, and res instructions).
0000:                   SYS_IDX_MMUEN	    equ 0
0001:                   SYS_IDX_SDCLK	    equ 1
0002:                   SYS_IDX_SDCS	    equ 2
0003:                   SYS_IDX_SDICLR	    equ 3
0004:                   SYS_IDX_SDOCLK	    equ 4
0005:                   SYS_IDX_BDIR	    equ 5
0006:                   SYS_IDX_BC1	    equ 6
0007:                   SYS_IDX_RESERVED    equ 7
                        #include "mmu.inc"
                        ; The MMU consists of four 16KB page frames in the Z80's address space.
                        ; Each page frame has its own 4-bit-wide register, which defines which physical
                        ; page is mapped into that frame. There are 16 physical pages, each 16KB in size,
                        ; for a total of 256KB of physical address space.
                        ; The physical memory map is:
                        ; 0x00000-0x7FFFF: Flash RAM
                        ; 0x80000-0xFFFFF: RAM
                        
0060:                   PORT_MMUBASE	equ 0x60		; base port address for MMU register
0060:                   PORT_MMUPG0	equ PORT_MMUBASE	; port address for MMU page 0 register
0061:                   PORT_MMUPG1	equ PORT_MMUBASE + 1	; port address for MMU page 1 register
0062:                   PORT_MMUPG2	equ PORT_MMUBASE + 2	; port address for MMU page 2 register
0063:                   PORT_MMUPG3	equ PORT_MMUBASE + 3	; port address for MMU page 3 register
                        
0000:                   MMU_ROM_BASE	equ 0			; ROM starts at physical page 0
0008:                   MMU_RAM_BASE	equ 8			; RAM starts at physical page 8
                        #include "7segdisp.inc"
0000:                   PORT_SEG0	equ 0x00	    ; port address for first 7-segment display element
0010:                   PORT_SEG1	equ 0x10	    ; port address for second 7-segment display element
                        
                        ; 7-segment display map
                        ;      A
                        ;  +-------+
                        ;  |       |
                        ; F|       |B
                        ;  |   G   |
                        ;  +-------+
                        ;  |       |
                        ; E|       |C
                        ;  |   D   |
                        ;  +-------+  .DP
                        
                        ; These values are the bit masks.
0001:                   SEG_A		equ 0x01	; segment A
0002:                   SEG_B		equ 0x02	; segment B
0004:                   SEG_C		equ 0x04	; segment C
0008:                   SEG_D		equ 0x08	; segment D
0010:                   SEG_E		equ 0x10	; segment E
0020:                   SEG_F		equ 0x20	; segment F
0040:                   SEG_G		equ 0x40	; segment G
0080:                   SEG_DP		equ 0x80	; decimal point
                        
                        ; These are the bit numbers (useful for bit, set, and res instructions).
0000:                   SEG_IDX_A	equ 0
0001:                   SEG_IDX_B	equ 1
0002:                   SEG_IDX_C	equ 2
0003:                   SEG_IDX_D	equ 3
0004:                   SEG_IDX_E	equ 4
0005:                   SEG_IDX_F	equ 5
0006:                   SEG_IDX_G	equ 6
0007:                   SEG_IDX_DP	equ 7
                        #include "joystick.inc"
0000:                   PORT_JOY0	equ 0x00	    ; port address for first joystick (read-only)
0010:                   PORT_JOY1	equ 0x10	    ; port address for second joystick (read-only)
                        
                        ; Bit masks for the values in the joystick status register.
                        ; These bits are active-low (normally high).
0001:                   JOY_UP		equ 0x01
0002:                   JOY_DOWN	equ 0x02
0004:                   JOY_LEFT	equ 0x04
0008:                   JOY_RIGHT	equ 0x08
0010:                   JOY_FIRE	equ 0x10
0020:                   JOY_SDWP	equ 0x20	    ; only on PORT_JOY1 (second port)
0040:                   JOY_SDCD	equ 0x40	    ; only on PORT_JOY1 (second port)
0080:                   JOY_RESERVED	equ 0x80
                        
                        ; The bit numbers (useful for bit, set, and res instructions).
0000:                   JOY_IDX_UP	equ 0
0001:                   JOY_IDX_DOWN	equ 1
0002:                   JOY_IDX_LEFT	equ 2
0003:                   JOY_IDX_RIGHT	equ 3
0004:                   JOY_IDX_FIRE	equ 4
0005:                   JOY_IDX_SDWP	equ 5
0006:                   JOY_IDX_SDCD	equ 6
                        #include "z84c20.inc"
                        ; The Z84C20 is the Z80's PIO peripheral. See um0081.pdf for documentation.
                        
0030:                   PORT_PIOBASE	equ 0x30		; base port address for PIO chip
0030:                   PORT_PIOADAT	equ PORT_PIOBASE	; port address for PIO port A, data register
0031:                   PORT_PIOBDAT	equ PORT_PIOBASE + 1    ; port address for PIO port B, data register
0032:                   PORT_PIOACTL	equ PORT_PIOBASE + 2    ; port address for PIO port A, control register
0033:                   PORT_PIOBCTL	equ PORT_PIOBASE + 3    ; port address for PIO port B, control register
                        
                        ; PIO Control Register commands
0000:                   PIOC_IVEC	equ 0x00	; OR in the high 7 bits of the interrupt vector
000F:                   PIOC_MODE	equ 0x0F	; OR in the desired PIOMODE_xxx setting
0007:                   PIOC_ICTL	equ 0x07	; OR in the desired PIOICTL_xxx settings
                        
                        ; PIOC_MODE values
0000:                   PIOMODE_OUTPUT	equ 0x00
0040:                   PIOMODE_INPUT	equ 0x40
0080:                   PIOMODE_BIDIREC	equ 0x80
00C0:                   PIOMODE_CONTROL	equ 0xC0	; next control byte written must be the IO direction byte
                        				; 1 = input, 0 = output
                        
                        ; PIOC_ICTL values
0080:                   PIOICTL_INTENA	equ 0x80	; enable interrupts
0000:                   PIOICTL_INTDIS	equ 0x00	; disable interrupts
0040:                   PIOICTL_AND	equ 0x40	; AND inputs together for port monitoring interrupt
0000:                   PIOICTL_OR	equ 0x00	; OR inputs together for port monitoring interrupt
0020:                   PIOICTL_HIGH	equ 0x20	; interrupt on high (1) inputs
0000:                   PIOICTL_LOW	equ 0x00	; interrupt on low (0) inputs
0010:                   PIOICTL_MASKNXT equ 0x10	; next control byte written must be the input interrupt mask
                        				; 1 = input masked, 0 = input enabled
                        
                        M_pio_reset	macro
                            ld	    a, PIOC_MODE | PIOMODE_INPUT
                            out	    (PORT_PIOACTL), a
                            out	    (PORT_PIOBCTL), a
                            ld	    a, PIOC_ICTL | PIOICTL_INTDIS
                            out	    (PORT_PIOACTL), a
                            out	    (PORT_PIOBCTL), a
                            endm
                        #include "z84c30.inc"
                        ; The Z84C30 is the Z80's CTC peripheral. See um0081.pdf for documentation.
                        
0040:                   PORT_CTCBASE	equ 0x40		; base port address for CTC chip
0040:                   PORT_CTCIVEC	equ PORT_CTCBASE	; port address for Interrupt Vector Register
0040:                   PORT_CTC0	equ PORT_CTCBASE	; port address for CTC channel 0
0041:                   PORT_CTC1	equ PORT_CTCBASE + 1	; port address for CTC channel 1
0042:                   PORT_CTC2	equ PORT_CTCBASE + 2	; port address for CTC channel 2
0043:                   PORT_CTC3	equ PORT_CTCBASE + 3	; port address for CTC channel 3
                        
                        ; CTC Channel Control Word bits
0080:                   CTC_INTENA	equ 0x80		; enable interrupts
0000:                   CTC_INTDIS	equ 0x00		; disable interrupts
0040:                   CTC_MODECTR	equ 0x40		; COUNTER mode
0000:                   CTC_MODETMR	equ 0x00		; TIMER mode
0020:                   CTC_SCALE256	equ 0x20		; prescale by 256
0000:                   CTC_SCALE16	equ 0x00		; prescale by 16
0010:                   CTC_RISING	equ 0x10		; CLK/TRG on rising edges
0000:                   CTC_FALLING	equ 0x00		; CLK/TRG on falling edges
0008:                   CTC_CLKTRG	equ 0x08		; CLK/TRG pulse starts timer
0000:                   CTC_AUTO	equ 0x00		; automatic timer start after loading time constant
0004:                   CTC_TIMENXT	equ 0x04		; next control byte written is the time constant
0002:                   CTC_RESET	equ 0x02		; software reset
0001:                   CTC_CONTROL	equ 0x01		; always set to indicate this is a control word, not IVEC 
                        
                        M_ctc_reset	macro
                            ld	    a, CTC_CONTROL | CTC_RESET | CTC_INTDIS
                            out	    (PORT_CTC0), a
                            out	    (PORT_CTC1), a
                            out	    (PORT_CTC2), a
                            out	    (PORT_CTC3), a
                            endm
                        #include "z84c40.inc"
                        ; The Z84C40 is the Z80's SIO peripheral. See um0081.pdf for documentation.
                        
0020:                   PORT_SIOBASE	    equ 0x20		    ; base port address for SIO chip
0020:                   PORT_SIOADAT	    equ PORT_SIOBASE	    ; port address for SIO port A, data register
0021:                   PORT_SIOBDAT	    equ PORT_SIOBASE + 1    ; port address for SIO port B, data register
0022:                   PORT_SIOACTL	    equ PORT_SIOBASE + 2    ; port address for SIO port A, control register
0023:                   PORT_SIOBCTL	    equ PORT_SIOBASE + 3    ; port address for SIO port B, control register
                        
                        ; WR0 "CRC Reset Code" values (bits 7-6)
0000:                   SIOWR0_CRC_NOP		equ 0x00	    ; no CRC reset code
0040:                   SIOWR0_CRC_RST_RX_CHK	equ 1 << 6	    ; reset RX CRC checker
0080:                   SIOWR0_CRC_RST_TX_GEN	equ 2 << 6	    ; reset TX CRC generator
00C0:                   SIOWR0_CRC_RST_TX_UNDR  equ 3 << 6	    ; reset TX underrun/EOM latch
                        
                        ; WR0 "Command" values (bits 5-3)
0000:                   SIOWR0_CMD_NOP		equ 0x00	    ; no command
0008:                   SIOWR0_CMD_SND_ABRT	equ 1 << 3	    ; send abort (SDLC only)
0010:                   SIOWR0_CMD_RST_EXTINT	equ 2 << 3	    ; reset external/status interrupts
0018:                   SIOWR0_CMD_RST_CHAN	equ 3 << 3	    ; reset channel
0020:                   SIOWR0_CMD_INTENA_NXTRX	equ 4 << 3	    ; enable interrupt on next receive character
0028:                   SIOWR0_CMD_RST_TXINTPND equ 5 << 3	    ; reset TX interrupt pending
0030:                   SIOWR0_CMD_RST_ERR	equ 6 << 3	    ; reset error latches
0038:                   SIOWR0_CMD_INTRETN	equ 7 << 3	    ; return from interrupt (not needed with Z80)
                        
                        ; WR0 "Pointer" values (bits 2-0)
0000:                   SIOWR0_PTR_R0		equ 0x00	    ; set pointer to register 0
0001:                   SIOWR0_PTR_R1		equ 0x01	    ; set pointer to register 1
0002:                   SIOWR0_PTR_R2		equ 0x02	    ; set pointer to register 2
0003:                   SIOWR0_PTR_R3		equ 0x03	    ; set pointer to register 3
0004:                   SIOWR0_PTR_R4		equ 0x04	    ; set pointer to register 4
0005:                   SIOWR0_PTR_R5		equ 0x05	    ; set pointer to register 5
0006:                   SIOWR0_PTR_R6		equ 0x06	    ; set pointer to register 6
0007:                   SIOWR0_PTR_R7		equ 0x07	    ; set pointer to register 7
                        
                        ; WR1 interrupt & wait/ready control bits
0001:                   SIOWR1_EXTINTENA	equ 0x01	    ; external/status interrupt enable
0002:                   SIOWR1_TXINTENA		equ 0x02	    ; TX interrupt enable
0004:                   SIOWR1_STATIVEC		equ 0x04	    ; status affects interrupt vector (set in ch. B only)
0000:                   SIOWR1_RXINT_DISABLE	equ 0 << 3	    ; RX interrupts disabled
0008:                   SIOWR1_RXINT_FIRST	equ 1 << 3	    ; RX interrupt on first character
0010:                   SIOWR1_RXINT_ALLPRTY	equ 2 << 3	    ; RX interrupt on all characters, parity err is SR cond
0018:                   SIOWR1_RXINT_ALLNPRTY	equ 3 << 3	    ; RX interrupt on all characters, parity err no intr
                        ; bits 7-5 are for WAIT/READY functions, which we don't use (always write as 0)
                        
                        ; WR2 is the interrupt vector register (set in channel B only)
                        
                        ; WR3 receiver logic control bits
0001:                   SIOWR3_RXENA		equ 0x01	    ; receiver enable
0002:                   SIOWR3_SYNC_INHIBIT	equ 0x02	    ; sync character load inhibit
0004:                   SIOWR3_ADDR_SRCHMODE	equ 0x04	    ; address search mode
0008:                   SIOWR3_RXCRCENA		equ 0x08	    ; receiver CRC enable
0010:                   SIOWR3_ENTER_HUNT	equ 0x10	    ; enter hunt phase
0020:                   SIOWR3_AUTO_ENABLES	equ 0x20	    ; auto enables (DCD/CTS are RX/TX enables)
0000:                   SIOWR3_RX_5_BITS	equ 0 << 6	    ; receive 5 bits/character
0040:                   SIOWR3_RX_7_BITS	equ 1 << 6	    ; receive 7 bits/character
0080:                   SIOWR3_RX_6_BITS	equ 2 << 6	    ; receive 6 bits/character
00C0:                   SIOWR3_RX_8_BITS	equ 3 << 6	    ; receive 8 bits/character
                        
                        ; WR4 RX/TX configuration (set first before WR1, WR3, WR5, WR6, and WR7)
0001:                   SIOWR4_PARITY		equ 0x01	    ; parity on/off
0002:                   SIOWR4_PRTY_EVEN	equ 0x02	    ; even parity
0000:                   SIOWR4_PRTY_ODD		equ 0x00	    ; odd parity
0000:                   SIOWR4_TXSTOP_SYNC	equ 0 << 2	    ; synchronous mode (no TX stop bits)
0004:                   SIOWR4_TXSTOP_1		equ 1 << 2	    ; 1 TX stop bit
0008:                   SIOWR4_TXSTOP_1_5	equ 2 << 2	    ; 1.5 TX stop bits
000C:                   SIOWR4_TXSTOP_2		equ 3 << 2	    ; 2 TX stop bits
                        ; bits 5-4 set the sync modes, which we don't use (always write as 0)
0000:                   SIOWR4_CLK_x1		equ 0 << 6	    ; data rate x1 = clock rate
0040:                   SIOWR4_CLK_x16		equ 1 << 6	    ; data rate x16 = clock rate
0080:                   SIOWR4_CLK_x32		equ 2 << 6	    ; data rate x32 = clock rate
00C0:                   SIOWR4_CLK_x64		equ 3 << 6	    ; data rate x64 = clock rate
                        
                        ; WR5 transmitter logic control bits
0001:                   SIOWR5_TXCRCENA		equ 0x01	    ; transmitter CRC enable
0002:                   SIOWR5_RTS		equ 0x02	    ; request to send
0004:                   SIOWR5_CRC16_SDLC	equ 0x04	    ; CRC-16 vs. SDLC polynomial
0008:                   SIOWR5_TXENA		equ 0x08	    ; transmitter enable
0010:                   SIOWR5_SND_BRK		equ 0x10	    ; send break
0000:                   SIOWR5_TX_5_BITS	equ 0 << 5	    ; transmit 5 bits/character
0020:                   SIOWR5_TX_7_BITS	equ 1 << 5	    ; transmit 7 bits/character
0040:                   SIOWR5_TX_6_BITS	equ 2 << 5	    ; transmit 6 bits/character
0060:                   SIOWR5_TX_8_BITS	equ 3 << 5	    ; transmit 8 bits/character
0080:                   SIOWR5_DTR		equ 0x80	    ; data terminal ready
                        
                        ; WR6 transmitter sync register for use in synchronous modes, which we don't use
                        ; WR7 receiver sync register for use in synchronous modes, which we don't use
                        
                        ; RR0 status bits (mostly normal operation)
0001:                   SIORR0_RCA		equ 0x01	    ; RX character available
0002:                   SIORR0_INTPND		equ 0x02	    ; interrupt pending (channel A only)
0004:                   SIORR0_TBE		equ 0x04	    ; TX buffer empty
0008:                   SIORR0_DCD		equ 0x08	    ; latched DCD input bit
0010:                   SIORR0_SYNC		equ 0x10	    ; latched SYNC input bit (hunt in SDLC)
0020:                   SIORR0_CTS		equ 0x20	    ; latched CTS input bit
0040:                   SIORR0_TX_UNDR		equ 0x40	    ; TX underrun / end of message
0080:                   SIORR0_BRK_ABRT		equ 0x80	    ; break/abort detected
                        ; As bit numbers, useful for the "bit" instruction, to test individual bit flags
0000:                   SIORR0_IDX_RCA		equ 0
0001:                   SIORR0_IDX_INTPND	equ 1
0002:                   SIORR0_IDX_TBE		equ 2
0003:                   SIORR0_IDX_DCD		equ 3
0004:                   SIORR0_IDX_SYNC		equ 4
0005:                   SIORR0_IDX_CTS		equ 5
0006:                   SIORR0_IDX_TX_UNDR	equ 6
0007:                   SIORR0_IDX_BRK_ABRT	equ 7
                        
                        ; RR1 status bits (mostly errors)
0001:                   SIORR1_ALLSENT		equ 0x01	    ; all characters fully sent
                        ; bits 3-1 are SDLC-only
0010:                   SIORR1_PRTYERR		equ 0x10	    ; parity error
0020:                   SIORR1_ROE		equ 0x20	    ; RX overrun error
0040:                   SIORR1_CRCFRMERR	equ 0x40	    ; CRC/framing error
                        ; bit 7 is SDLC-only
                        
                        ; RR2 is the interrupt vector register (read from channel B only)
                        ; - if "Status Affects Vector" bit is set, this will be the current vector value,
                        ;   modified by whatever interrupt conditions are pending
                        
                        M_sio_reset	macro
                            ld	    a, SIOWR0_CMD_RST_CHAN
                            out	    (PORT_SIOACTL), a
                            out	    (PORT_SIOBCTL), a
                            endm
                        #include "ascii.inc"
0000:                   NUL	equ 0x00
0001:                   SOH	equ 0x01
0004:                   EOT	equ 0x04
0006:                   ACK	equ 0x06
0007:                   BEL	equ 0x07
0008:                   BS	equ 0x08
0009:                   HT	equ 0x09
000A:                   LF	equ 0x0A
000D:                   CR	equ 0x0D
0015:                   NAK	equ 0x15
001B:                   ESC	equ 0x1B
                        
                        ; some macros that we have to declare before use
                        M_sio_puts  macro str
                            ld	    hl, &str
                            call    sio_puts
                            endm
                        
                        M_sio_putc  macro ch
                            ld	    l, &ch
                            call    sio_putc
                            endm
                        
                        ; We set up the MMU so the Z80's memory map is as follows:
                        ; PG0: 0x0000-0x3FFF ROM physical page 0 (ROM page 0)
                        ; PG1: 0x4000-0x7FFF RAM physical page 8 (RAM page 0)
                        ; PG2: 0x8000-0xBFFF RAM physical page 9 (RAM page 1)
                        ; PG3: 0xC000-0xFFFF RAM physical page A (RAM page 2)
                        
                        ; We map our RAM area high so that our data fields don't clobber low memory where we're
                        ; likely to be loading programs.
FC00:                   #data RAM, 0xFC00, 0x400
                        ; define static variables here
FC00: 00                Sysreg::    defs 1	; current value of SYSREG
FC01: 00                Seg0_data:: defs 1	; current value of first 7-segment display byte
FC02: 00                Seg1_data:: defs 1	; current value of second 7-segment display byte
                        
0000:                   #code ROM, 0, 0x4000
                        
                        ; reset vector
0000:                   RST0::
0000: F3       [ 4]         di
0001: C3A900   [14]         jp	    init
0004: FFFFFFFF              defs    0x08-$
                        
0008:                   RST1::
0008: ED4D     [14]         reti
000A: FFFFFFFF              defs    0x10-$
000E: FFFF              
                        
0010:                   RST2::
0010: ED4D     [14]         reti
0012: FFFFFFFF              defs    0x18-$
0016: FFFF              
                        
0018:                   RST3::
0018: ED4D     [14]         reti
001A: FFFFFFFF              defs    0x20-$
001E: FFFF              
                        
0020:                   RST4::
0020: ED4D     [14]         reti
0022: FFFFFFFF              defs    0x28-$
0026: FFFF              
                        
0028:                   RST5::
0028: ED4D     [14]         reti
002A: FFFFFFFF              defs    0x30-$
002E: FFFF              
                        
0030:                   RST6::
0030: ED4D     [14]         reti
0032: FFFFFFFF              defs    0x38-$
0036: FFFF              
                        
                        ; maskable interrupt handler in interrupt mode 1:
0038:                   RST7::
0038: ED4D     [14]         reti
                        
                        ; non maskable interrupt:
                        ; e.g. call debugger and on exit resume.
003A: FFFFFFFF              defs    0x66-$
003E: FF...             
0066:                   NMI::
0066: ED45     [14]         retn
                        
                        ; Empty ISR for interrupts we want to ignore
0068:                   ISR_nop::
0068: FB       [ 4]         ei
0069: ED4D     [18]         reti
                        
006B: FFFFFFFF              defs    0x80-$
006F: FF...             
                        ; Interrupt Vector Table
0080:                   IVT::
                        ; Table starts at 0x0080
                        ; CTC has first 4 slots, so CTC Interrupt Vector register should be 0x80
0080: 6800                  .word   ISR_nop	    ; CTC channel 0
0082: 6800                  .word   ISR_nop	    ; CTC channel 1
0084: 6800                  .word   ISR_nop	    ; CTC channel 2
0086: 2701                  .word   ISR_ctc3	    ; CTC channel 3
                        ; TODO: ISRs for PIO & SIO
                        
0088:                   startup_msg::
0088: 0D0A5A45              .text   CR, LF, "ZED-80 monitor v1 ", __date__
008C: 442D3830          
0090: 206D6F6E          
0094: 69746F72          
0098: 20763120          
009C: 32303139          
00A0: 2D30342D          
00A4: 3239              
                            ; Falling through...
00A6:                   crlf::
00A6: 0D0A00                .text   CR, LF, NUL
                        
                        ; void init()
00A9:                   init::
                            ; Need to initialize MMU without use of RAM, so be careful here
00A9: AF       [ 4]         xor	    a
00AA: D360     [15]         out	    (PORT_MMUPG0), a	; map frame 0 to 1st page of ROM
00AC: 3E08     [22]         ld	    a, MMU_RAM_BASE
00AE: D361     [33]         out	    (PORT_MMUPG1), a	; map frame 1 to 1st page of RAM
00B0: 3E09     [40]         ld	    a, MMU_RAM_BASE + 1
00B2: D362     [51]         out	    (PORT_MMUPG2), a	; map frame 2 to 2nd page of RAM
00B4: 3E0A     [58]         ld	    a, MMU_RAM_BASE + 2
00B6: D363     [69]         out	    (PORT_MMUPG3), a	; map frame 3 to 3rd page of RAM
00B8: 3E0D     [76]         ld	    a, SYS_MMUEN | SYS_SDCS | SYS_SDICLR
00BA: D370     [87]         out	    (PORT_SYSREG), a	; enable MMU
00BC: 3200FC   [100]        ld	    (Sysreg), a
                            ; set up a stack
00BF: 31FFFF   [110]        ld	    sp, RAM_end-1
                            ; reset peripherals
                            M_pio_reset
00C2: 3E4F     [117]        ld	    a, PIOC_MODE | PIOMODE_INPUT
00C4: D332     [128]        out	    (PORT_PIOACTL), a
00C6: D333     [139]        out	    (PORT_PIOBCTL), a
00C8: 3E07     [146]        ld	    a, PIOC_ICTL | PIOICTL_INTDIS
00CA: D332     [157]        out	    (PORT_PIOACTL), a
00CC: D333     [168]        out	    (PORT_PIOBCTL), a
                            M_sio_reset
00CE: 3E18     [175]        ld	    a, SIOWR0_CMD_RST_CHAN
00D0: D322     [186]        out	    (PORT_SIOACTL), a
00D2: D323     [197]        out	    (PORT_SIOBCTL), a
                            M_ctc_reset
00D4: 3E03     [204]        ld	    a, CTC_CONTROL | CTC_RESET | CTC_INTDIS
00D6: D340     [215]        out	    (PORT_CTC0), a
00D8: D341     [226]        out	    (PORT_CTC1), a
00DA: D342     [237]        out	    (PORT_CTC2), a
00DC: D343     [248]        out	    (PORT_CTC3), a
                            ; set up interrupts
00DE: 3E00     [255]        ld	    a, hi(IVT)
00E0: ED47     [264]        ld	    i, a	    ; I gets high byte of IVT address
00E2: ED5E     [272]        im	    2		    ; select interrupt mode 2
00E4: FB       [276]        ei
                            ; clear 7-segment display
00E5: CD8A03   [293]        call    seg_init
                            ; initialize peripherals
00E8: CDF900   [310]        call    ctc_init	    ; need to set up CTC to get SIO working (need baud rate gen)
00EB: CD3301   [327]        call    sio_init
                            ; print startup banner
                            M_sio_puts startup_msg
00EE: 218800   [337]        ld	    hl, startup_msg
00F1: CD5B03   [354]        call    sio_puts
00F4: CD4F01   [371]        call    cmd_loop
00F7: 18FE     [383]        jr	    $		    ; loop forever
                        
                        ; void ctc_init()
                        #local
00F9:                   ctc_init::
                            ; load CTC Interrupt Vector Register
00F9: 3E80     [ 7]         ld	    a, lo(IVT)	    ; CTC interrupt vectors are the first 4 in the IVT
00FB: D340     [18]         out	    (PORT_CTCIVEC), a
                            ; channel 0 is the baud rate generator for serial 0
00FD: 3E57     [25]         ld	    a, CTC_CONTROL | CTC_RESET | CTC_TIMENXT | CTC_RISING | CTC_MODECTR
00FF: D340     [36]         out	    (PORT_CTC0), a
0101: 3E03     [43]         ld	    a, 3	    ; 1.8432MHz divided by 3 is 614.4kHz (SIO at x16 gives 38400 baud)
0103: D340     [54]         out	    (PORT_CTC0), a
                            ; channel 1 is the baud rate generator for serial 1
0105: 3E57     [61]         ld	    a, CTC_CONTROL | CTC_RESET | CTC_TIMENXT | CTC_RISING | CTC_MODECTR
0107: D341     [72]         out	    (PORT_CTC1), a
0109: 3E03     [79]         ld	    a, 3	    ; 1.8432MHz divided by 3 is 614.4kHz (SIO at x16 gives 38400 baud)
010B: D341     [90]         out	    (PORT_CTC1), a
010D: CD1601   [107]        call    ctc_tick_on
0110: C9       [117]        ret
                        #endlocal
                        
                        ; void ctc_tick_off()
0111:                   ctc_tick_off::
0111: 3E01     [ 7]         ld	    a, CTC_CONTROL | CTC_INTDIS
0113: D343     [18]         out	    (PORT_CTC3), a
0115: C9       [28]         ret
                        
                        ; void ctc_tick_on()
0116:                   ctc_tick_on::
                            ; channel 2 is used as a timer to divide down the system clock for channel 3
0116: 3E17     [ 7]         ld	    a, CTC_CONTROL | CTC_RESET | CTC_TIMENXT | CTC_AUTO | CTC_RISING | CTC_SCALE16 | CTC_MODETMR
0118: D342     [18]         out	    (PORT_CTC2), a
011A: 3EFA     [25]         ld	    a, 250	    ; 10MHz prescale by 16, divide by 250 is 2.5kHz
011C: D342     [36]         out	    (PORT_CTC2), a
                            ; channel 3 is used as a counter on the 2.5kHz signal from channel 2
011E: 3ED7     [43]         ld	    a, CTC_CONTROL | CTC_RESET | CTC_TIMENXT | CTC_RISING | CTC_MODECTR | CTC_INTENA
0120: D343     [54]         out	    (PORT_CTC3), a
0122: 3EFA     [61]         ld	    a, 250	    ; 2.5kHz divided by 250 is 10Hz
0124: D343     [72]         out	    (PORT_CTC3), a
0126: C9       [82]         ret
                        
                        ; CTC channel 3 ISR
                        ; - do not modify IX or IY, or call any routine that does, as they aren't saved/restored!
0127:                   ISR_ctc3::
0127: 08       [ 4]         ex	    af, af'
0128: D9       [ 8]         exx
0129: 2E80     [15]         ld	    l, SEG_DP
012B: CDE903   [32]         call    seg1_toggle
012E: D9       [36]         exx
012F: 08       [40]         ex	    af, af'
0130: FB       [44]         ei
0131: ED4D     [58]         reti
                        
                        ; void sio_init()
                        #local
0133:                   sio_init::
0133: E5       [11]         push    hl
0134: C5       [22]         push    bc
                            ; configure SIO port A
0135: 012207   [32]         ld	    bc, 0x0700 | PORT_SIOACTL
0138: 214801   [42]         ld	    hl, sioA_cfg
013B: EDB3     [58|21]      otir
                            ; configure SIO port B
013D: 012307   [68]         ld	    bc, 0x0700 | PORT_SIOBCTL
0140: 214801   [78]         ld	    hl, sioB_cfg
0143: EDB3     [94|21]      otir
0145: C1       [104]        pop	    bc
0146: E1       [114]        pop	    hl
0147: C9       [124]        ret
0148:                   sioA_cfg:
0148:                   sioB_cfg:
0148: 18                    .byte SIOWR0_CMD_RST_CHAN
0149: 04                    .byte SIOWR0_PTR_R4
014A: 44                    .byte SIOWR4_TXSTOP_1 | SIOWR4_CLK_x16
                            ; No need to set up WR1/WR2, as they are only used for interrupts
014B: 03                    .byte SIOWR0_PTR_R3
014C: C1                    .byte SIOWR3_RXENA | SIOWR3_RX_8_BITS
014D: 05                    .byte SIOWR0_PTR_R5
014E: EA                    .byte SIOWR5_RTS | SIOWR5_TXENA | SIOWR5_TX_8_BITS | SIOWR5_DTR
                            ; No need to set up WR6/WR7, as they are only used for synchronous modes
                        #endlocal
                        
                        ; void cmd_loop()
                        #local
014F:                   cmd_loop::
014F: E5       [11]         push    hl
0150: C5       [22]         push    bc
0151:                   prompt:
                            M_sio_putc '>'
0151: 2E3E     [ 7]         ld	    l, '>'
0153: CD5103   [24]         call    sio_putc
0156:                   nextByte:
0156: CDE402   [17]         call    sio_getc
                            ; map input byte to upper case
0159: CDA702   [34]         call    toupper
                            ; switch on input byte, and dispatch to appropriate subroutine
015C: 7D       [38]         ld	    a, l
015D: 217C01   [48]         ld	    hl, cmd_chars
0160: 010800   [58]         ld	    bc, num_cmds
0163: EDB1     [74|21]      cpir
0165: 20EF     [81|86]      jr	    nz, nextByte
0167: 218401   [91]         ld	    hl, cmd_procs
                            ; add 2 * (num_cmds - 1 - c) to hl
016A: 3E07     [98]         ld	    a, num_cmds-1
016C: 91       [102]        sub	    c
016D: 87       [106]        add	    a
016E: 4F       [110]        ld	    c, a
016F: 09       [121]        add	    hl, bc
                            M_deref_hl
                            ; hl = (hl)
                            ; destroys a
0170: 7E       [128]        ld	    a, (hl)
0171: 23       [134]        inc	    hl
0172: 66       [141]        ld	    h, (hl)
0173: 6F       [145]        ld	    l, a
                            ; call hl
0174: CDA402   [162]        call    jp_hl
0177: 18D8     [174]        jr	    prompt
0179: C1       [184]        pop	    bc
017A: E1       [194]        pop	    hl
017B: C9       [204]        ret
                        
017C:                   cmd_chars:
017C: 01425743              .byte SOH,'B','W','C','R','I','O',CR
0180: 52494F0D          
0008:                   num_cmds	equ $-cmd_chars
0184:                   cmd_procs:
0184: 9401                  .word cmd_do_packet
0186: 2702                  .word cmd_do_disp_bytes
0188: 2A02                  .word cmd_do_disp_words
018A: 2D02                  .word cmd_do_call
018C: 3002                  .word cmd_do_reset
018E: 3B02                  .word cmd_do_input
0190: 6202                  .word cmd_do_output
0192: 9302                  .word cmd_do_cr
                        #endlocal
                        
                        #local
0194:                   cmd_do_packet::
0194: E5       [11]         push    hl
0195: C5       [22]         push    bc
0196: D5       [33]         push    de
                            ; get packet type
0197: CDE402   [50]         call    sio_getc
019A: 7D       [54]         ld	    a, l
019B: FE57     [61]         cp	    'W'
019D: 2811     [68|73]      jr	    z, doWrite
019F: FE43     [75]         cp	    'C'
01A1: 284E     [82|87]      jr	    z, doCall
                            ; unrecognized packet type!
                            ; might be nice to consume everything up to EOT, but how long should we wait?
01A3:                   failure:
01A3: 2E4E     [ 7]         ld	    l, 'N'
01A5: 1802     [19]         jr	    putcAndDone
01A7:                   success:
01A7: 2E41     [ 7]         ld	    l, 'A'
01A9:                   putcAndDone:
01A9: CD5103   [17]         call    sio_putc
01AC:                   done:
01AC: D1       [10]         pop	    de
01AD: C1       [20]         pop	    bc
01AE: E1       [30]         pop	    hl
01AF: C9       [40]         ret
                        
01B0:                   doWrite:
                            ; Write packet consists of:
                            ;	'W'
                            ;	2-byte address
                            ;	2-byte length
                            ;	data bytes
                            ;	checksum byte
                            ;	EOT
                            ; place address in de and ix
01B0: CDE402   [17]         call    sio_getc
01B3: 5D       [21]         ld	    e, l
01B4: CDE402   [38]         call    sio_getc
01B7: 55       [42]         ld	    d, l
01B8: D5       [53]         push    de
01B9: DDE1     [67]         pop	    ix
                            ; place length in bc
01BB: CDE402   [84]         call    sio_getc
01BE: 4D       [88]         ld	    c, l
01BF: CDE402   [105]        call    sio_getc
01C2: 45       [109]        ld	    b, l
                            ; get a checksum started
01C3: 3E57     [116]        ld	    a, 'W'
01C5: 83       [120]        add	    e
01C6: 82       [124]        add	    d
01C7: 81       [128]        add	    c
01C8: 80       [132]        add	    b
                            ; keep running checksum in d
01C9: 57       [136]        ld	    d, a
                            ; read data bytes
01CA:                   writeLoop:
                            ; test bc against 0
01CA: AF       [ 4]         xor	    a		    ; resets carry flag, sets a=0
01CB: 67       [ 8]         ld	    h, a
01CC: 6F       [12]         ld	    l, a	    ; set hl=0
01CD: ED42     [27]         sbc	    hl, bc	    ; test bc against 0
01CF: 280E     [34|39]      jr	    z, writeDataDone
01D1: 0B       [40]         dec	    bc
01D2: CDE402   [57]         call    sio_getc	    ; l = next byte
01D5: DD7500   [76]         ld	    (ix), l
01D8: DD23     [86]         inc	    ix
                            ; checksum data byte
01DA: 7A       [90]         ld	    a, d
01DB: 85       [94]         add	    l
01DC: 57       [98]         ld	    d, a
01DD: 18EB     [110]        jr	    writeLoop
01DF:                   writeDataDone:
01DF: CDE402   [17]         call    sio_getc	    ; l = incoming checksum
01E2: 5D       [21]         ld	    e, l
01E3: CDE402   [38]         call    sio_getc	    ; expecting an EOT
01E6: 7D       [42]         ld	    a, l
01E7: FE04     [49]         cp	    EOT
01E9: 20B8     [56|61]      jr	    nz, failure
                            ; validate checksum
01EB: 7A       [60]         ld	    a, d
01EC: BB       [64]         cp	    e
01ED: 28B8     [71|76]      jr	    z, success
01EF: 18B2     [83]         jr	    failure
                        
01F1:                   doCall:
                            ; Call packet consists of:
                            ;	'C'
                            ;	2-byte address
                            ;	checksum byte
                            ;	EOT
                            ; place address in bc
01F1: CDE402   [17]         call    sio_getc
01F4: 4D       [21]         ld	    c, l
01F5: CDE402   [38]         call    sio_getc
01F8: 45       [42]         ld	    b, l
01F9: CDE402   [59]         call    sio_getc	    ; l = incoming checksum
01FC: 5D       [63]         ld	    e, l
01FD: CDE402   [80]         call    sio_getc	    ; expecting an EOT
0200: 7D       [84]         ld	    a, l
0201: FE04     [91]         cp	    EOT
0203: 209E     [98|103]     jr	    nz, failure
                            ; calculate checksum
0205: 3E43     [105]        ld	    a, 'C'
0207: 81       [109]        add	    c
0208: 80       [113]        add	    b
                            ; validate checksum
0209: BB       [117]        cp	    e
020A: 2097     [124|129]    jr	    nz, failure
                            M_sio_putc 'A'
020C: 2E41     [131]        ld	    l, 'A'
020E: CD5103   [148]        call    sio_putc
                            ; af is scratch & we already save/restore bc, de, hl
                            ; save/restore ix, iy too
0211: DDE5     [163]        push    ix
0213: FDE5     [178]        push    iy
0215: CD1101   [195]        call    ctc_tick_off
                            ; call bc
0218: CDA502   [212]        call    jp_bc
021B: CD8A03   [229]        call    seg_init
021E: CD1601   [246]        call    ctc_tick_on
0221: FDE1     [260]        pop	    iy
0223: DDE1     [274]        pop	    ix
0225: 1885     [286]        jr	    done
                        #endlocal
                        
0227:                   cmd_do_disp_bytes::
0227: E5       [11]         push    hl
                            ; TODO: NYI
0228: E1       [21]         pop	    hl
0229: C9       [31]         ret
                        
022A:                   cmd_do_disp_words::
022A: E5       [11]         push    hl
                            ; TODO: NYI
022B: E1       [21]         pop	    hl
022C: C9       [31]         ret
                        
022D:                   cmd_do_call::
022D: E5       [11]         push    hl
                            ; TODO: NYI
022E: E1       [21]         pop	    hl
022F: C9       [31]         ret
                        
0230:                   cmd_do_reset::
0230: E5       [11]         push    hl
                            M_sio_putc 'R'
0231: 2E52     [18]         ld	    l, 'R'
0233: CD5103   [35]         call    sio_putc
0236: CD0904   [52]         call    delay_1ms
0239: F3       [56]         di
023A: C7       [67]         rst	    0x00	; reset
                        
                        #local
023B:                   cmd_do_input::
023B: E5       [11]         push    hl
023C: C5       [22]         push    bc
                            M_sio_puts prompt_str
023D: 215F02   [32]         ld	    hl, prompt_str
0240: CD5B03   [49]         call    sio_puts
0243: CDF102   [66]         call    sio_gethex8
0246: 7C       [70]         ld	    a, h
0247: B7       [74]         or	    a		; fast test a==0
0248: 200C     [81|86]      jr	    nz, done
                            ; I/O address is in l
024A: 4D       [85]         ld	    c, l
                            M_sio_puts cmd_equals_str
024B: 219C02   [95]         ld	    hl, cmd_equals_str
024E: CD5B03   [112]        call    sio_puts
0251: ED68     [124]        in	    l, (c)
0253: CD7103   [141]        call    sio_puthex8
0256:                   done:
                            M_sio_puts crlf
0256: 21A600   [10]         ld	    hl, crlf
0259: CD5B03   [27]         call    sio_puts
025C: C1       [37]         pop	    bc
025D: E1       [47]         pop	    hl
025E: C9       [57]         ret
                        
025F:                   prompt_str:
025F: 492400                .asciz  "I$"
                        #endlocal
                        
                        #local
0262:                   cmd_do_output::
0262: E5       [11]         push    hl
0263: C5       [22]         push    bc
                            M_sio_puts prompt_str
0264: 219002   [32]         ld	    hl, prompt_str
0267: CD5B03   [49]         call    sio_puts
026A: CDF102   [66]         call    sio_gethex8
026D: 7C       [70]         ld	    a, h
026E: B7       [74]         or	    a		; fast test a==0
026F: 2016     [81|86]      jr	    nz, done
                            ; I/O address is in l -- stash it in c
0271: 4D       [85]         ld	    c, l
                            M_sio_puts cmd_equals_str
0272: 219C02   [95]         ld	    hl, cmd_equals_str
0275: CD5B03   [112]        call    sio_puts
0278: CDF102   [129]        call    sio_gethex8
027B: 7C       [133]        ld	    a, h
027C: B7       [137]        or	    a		; fast test a==0
027D: 2008     [144|149]    jr	    nz, done
                            ; output value is in l
027F: ED69     [156]        out	    (c), l
                            M_sio_puts cmd_ok_str
0281: 219F02   [166]        ld	    hl, cmd_ok_str
0284: CD5B03   [183]        call    sio_puts
0287:                   done:
                            M_sio_puts crlf
0287: 21A600   [10]         ld	    hl, crlf
028A: CD5B03   [27]         call    sio_puts
028D: C1       [37]         pop	    bc
028E: E1       [47]         pop	    hl
028F: C9       [57]         ret
                        
0290:                   prompt_str:
0290: 4F2400                .asciz  "O$"
                        #endlocal
                        
0293:                   cmd_do_cr::
0293: E5       [11]         push    hl
                            M_sio_puts crlf
0294: 21A600   [21]         ld	    hl, crlf
0297: CD5B03   [38]         call    sio_puts
029A: E1       [48]         pop	    hl
029B: C9       [58]         ret
                        
029C:                   cmd_equals_str::
029C: 3D2400                .asciz  "=$"
029F:                   cmd_ok_str::
029F: 0D0A4F4B              .text   CR, LF, "OK", NUL
02A3: 00                
                        
                        ; Library routines
                        ; ----------------
                        
                        ; Call jp_hl to make a call to the address in hl. What actually happens is the call to jp_hl loads
                        ; the return address on the stack, then control transfers to jp_hl, which jumps to the address
                        ; in hl, thus giving the effect of "call hl", which isn't a Z80 instruction.
02A4:                   jp_hl::
02A4: E9       [ 4]         jp	    hl
                        
                        ; Call jp_bc to make a call to the address in bc. What actually happens is the call to jp_bc loads
                        ; the return address on the stack, then control transfers to jp_bc, which jumps to the address
                        ; in bc, thus giving the effect of "call bc", which isn't a Z80 instruction.
02A5:                   jp_bc::
02A5: C5       [11]         push    bc
02A6: C9       [21]         ret
                        
                        ; uint8_t toupper(uint8_t ch)
                        ; - map character "ch" to upper-case, if it is a lower-case letter
                        #local
02A7:                   toupper::
02A7: 7D       [ 4]         ld	    a, l
02A8: FE61     [11]         cp	    'a'
02AA: D8       [16|22]      ret	    c
02AB: FE7B     [23]         cp	    'z'+1
02AD: D0       [28|34]      ret	    nc
02AE: E6DF     [35]         and	    ~0x20
02B0: 6F       [39]         ld	    l, a
02B1: C9       [49]         ret
                        #endlocal
                        
                        ; Z_flag isxdigit(uint8_t ch)
                        ; - set Z flag iff "ch" is a digit 0-9 or A-F
                        #local
02B2:                   isxdigit::
02B2: 7D       [ 4]         ld	    a, l
02B3: FE30     [11]         cp	    '0'
02B5: 380C     [18|23]      jr	    c, no
02B7: FE3A     [25]         cp	    '9'+1
02B9: 380B     [32|37]      jr	    c, yes
02BB: FE41     [39]         cp	    'A'
02BD: 3804     [46|51]      jr	    c, no
02BF: FE47     [53]         cp	    'F'+1
02C1: 3803     [60|65]      jr	    c, yes
                            ; otherwise, no
02C3:                   no:
02C3: FE30     [ 7]         cp	    '0'		; reset Z flag (a != '0', so Z is reset)
02C5: C9       [17]         ret
02C6:                   yes:
02C6: AF       [ 4]         xor	    a		; set Z flag
02C7: C9       [14]         ret
                        #endlocal
                        
                        ; uint8_t hex2bin(uint8_t ch)
                        ; - converts the single hex digit "ch" (must be 0-9 or A-F) into a binary value between 0-15
                        #local
02C8:                   hex2bin::
02C8: 7D       [ 4]         ld	    a, l
02C9: FE41     [11]         cp	    'A'
02CB: 3004     [18|23]      jr	    nc, hex
02CD: D630     [25]         sub	    '0'
02CF: 6F       [29]         ld	    l, a
02D0: C9       [39]         ret
02D1:                   hex:
02D1: D637     [ 7]         sub	    'A'-10
02D3: 6F       [11]         ld	    l, a
02D4: C9       [21]         ret
                        #endlocal
                        
                        ; uint8_t bin2hex(uint8_t val)
                        ; - converts the lower 4 bits of the 8-bit value "val" to hexadecimal (0-9,A-F)
                        #local
02D5:                   bin2hex::
02D5: 7D       [ 4]         ld	    a, l
02D6: E60F     [11]         and	    0xF
02D8: FE0A     [18]         cp	    0xA
02DA: 3804     [25|30]      jr	    c, decimal
02DC: C637     [32]         add	    'A'-10
02DE: 6F       [36]         ld	    l, a
02DF: C9       [46]         ret
02E0:                   decimal:
02E0: C630     [ 7]         add	    '0'
02E2: 6F       [11]         ld	    l, a
02E3: C9       [21]         ret
                        #endlocal
                        
                        ; uint8_t sio_getc()
                        ; - wait synchronously until a byte is available from port A, and return it
                        #local
02E4:                   sio_getc::
02E4:                   waitRX:
                            ; wait for an input character
02E4: DB22     [11]         in	    a, (PORT_SIOACTL)
02E6: CB47     [19]         bit	    SIORR0_IDX_RCA, a
02E8: 28FA     [26|31]      jr	    z, waitRX
                            ; read input character
02EA: DB20     [37]         in	    a, (PORT_SIOADAT)
02EC: 6F       [41]         ld	    l, a
02ED: CD9203   [58]         call    seg_writehex
02F0: C9       [68]         ret
                        #endlocal
                        
                        ; int16_t sio_gethex8()
                        ; - read a two-char 8-bit hex value from port A
                        ; - echoes chars as entered, erases as backspaced
                        ; - BS erases last entered char
                        ; - ESC aborts entry at any point
                        ; - CR accepts entry
                        ; - returns unsigned 8-bit value entered, or -1 if aborted
                        #local
02F1:                   sio_gethex8::
02F1: C5       [11]         push    bc
02F2:                   getFirst:
02F2: CDE402   [17]         call    sio_getc
02F5: 7D       [21]         ld	    a, l
02F6: FE1B     [28]         cp	    ESC
02F8: 2852     [35|40]      jr	    z, abort
02FA: CDA702   [52]         call    toupper
02FD: CDB202   [69]         call    isxdigit	; Z set iff is hex digit
0300: 20F0     [76|81]      jr	    nz, getFirst
0302: CD5103   [93]         call    sio_putc	; echo digit
0305: 45       [97]         ld	    b, l	; store high digit in b
0306:                   getSecond:
0306: CDE402   [17]         call    sio_getc
0309: 7D       [21]         ld	    a, l
030A: FE1B     [28]         cp	    ESC
030C: 283E     [35|40]      jr	    z, abort
030E: FE08     [42]         cp	    BS
0310: 2005     [49|54]      jr	    nz, notBS1
0312: CD5103   [66]         call    sio_putc	; echo BS
0315: 18DB     [78]         jr	    getFirst
0317:                   notBS1:
0317: CDA702   [17]         call    toupper
031A: CDB202   [34]         call    isxdigit	; Z set iff is hex digit
031D: 20E7     [41|46]      jr	    nz, getSecond
031F: CD5103   [58]         call    sio_putc	; echo digit
0322: 4D       [62]         ld	    c, l	; store low digit in c
0323:                   getThird:
0323: CDE402   [17]         call    sio_getc
0326: 7D       [21]         ld	    a, l
0327: FE1B     [28]         cp	    ESC
0329: 2821     [35|40]      jr	    z, abort
032B: FE0D     [42]         cp	    CR
032D: 2809     [49|54]      jr	    z, convert
032F: FE08     [56]         cp	    BS
0331: 20F0     [63|68]      jr	    nz, getThird
                            ; handle backspace
0333: CD5103   [80]         call    sio_putc	; echo BS
0336: 18CE     [92]         jr	    getSecond
0338:                   convert:
0338: 68       [ 4]         ld	    l, b
0339: CDC802   [21]         call    hex2bin
033C: 45       [25]         ld	    b, l
033D: 69       [29]         ld	    l, c
033E: CDC802   [46]         call    hex2bin
                            ; compute a = (b << 4) | l
0341: 78       [50]         ld	    a, b
0342: 87       [54]         add	    a
0343: 87       [58]         add	    a
0344: 87       [62]         add	    a
0345: 87       [66]         add	    a
0346: B5       [70]         or	    l
0347: 6F       [74]         ld	    l, a
0348: 2600     [81]         ld	    h, 0
034A: C1       [91]         pop	    bc
034B: C9       [101]        ret
034C:                   abort:
034C: 21FFFF   [10]         ld	    hl, -1
034F: C1       [20]         pop	    bc
0350: C9       [30]         ret	    
                        #endlocal
                        
                        ; void sio_putc(uint8_t ch)
                        ; - write the specified character "ch" to port A
                        #local
0351:                   sio_putc::
0351:                   waitTX:
                            ; wait until transmitter is idle
0351: DB22     [11]         in	    a, (PORT_SIOACTL)
0353: CB57     [19]         bit	    SIORR0_IDX_TBE, a
0355: 28FA     [26|31]      jr	    z, waitTX
                            ; write output character
0357: 7D       [30]         ld	    a, l
0358: D320     [41]         out	    (PORT_SIOADAT), a	; send byte out serial port
035A: C9       [51]         ret
                        #endlocal
                        
                        ; void sio_puts(uint8_t *text)
                        ; - write the NUL-terminated string at "text" to port A
                        #local
035B:                   sio_puts::
035B: E5       [11]         push    hl
035C: C5       [22]         push    bc
035D:                   nextByte:
035D: 7E       [ 7]         ld	    a, (hl)
035E: 23       [13]         inc	    hl
035F: B7       [17]         or	    a		; fast test a==0
0360: 280C     [24|29]      jr	    z, done
0362: 47       [28]         ld	    b, a
0363:                   waitTX:
                            ; wait until transmitter is idle
0363: DB22     [11]         in	    a, (PORT_SIOACTL)
0365: CB57     [19]         bit	    SIORR0_IDX_TBE, a
0367: 28FA     [26|31]      jr	    z, waitTX
                            ; write output character
0369: 78       [30]         ld	    a, b
036A: D320     [41]         out	    (PORT_SIOADAT), a	; send byte out serial port
036C: 18EF     [53]         jr	    nextByte
036E:                   done:
036E: C1       [10]         pop	    bc
036F: E1       [20]         pop	    hl
0370: C9       [30]         ret
                        #endlocal
                        
                        ; void sio_puthex8(uint8_t val)
                        ; - writes the specified 8-bit value "val" as a pair of hex digits to port A
0371:                   sio_puthex8::
0371: E5       [11]         push    hl
0372: 65       [15]         ld	    h, l
0373: CB3D     [23]         srl	    l
0375: CB3D     [31]         srl	    l
0377: CB3D     [39]         srl	    l
0379: CB3D     [47]         srl	    l
037B: CDD502   [64]         call    bin2hex
037E: CD5103   [81]         call    sio_putc
0381: 6C       [85]         ld	    l, h
0382: CDD502   [102]        call    bin2hex
0385: CD5103   [119]        call    sio_putc
0388: E1       [129]        pop	    hl
0389: C9       [139]        ret
                        
                        ; void seg_init()
038A:                   seg_init::
038A: AF       [ 4]         xor	    a
038B: CDF103   [21]         call    seg0_write
038E: CDF703   [38]         call    seg1_write
0391: C9       [48]         ret
                        
                        ; void seg_writehex(uint8_t val)
                        ; - write the two hex digits of "val" to the 7-segment displays
0392:                   seg_writehex::
0392: E5       [11]         push    hl
0393: CDB903   [28]         call    seg1_writehex
0396: 7D       [32]         ld	    a, l
0397: 07       [36]         rlca
0398: 07       [40]         rlca
0399: 07       [44]         rlca
039A: 07       [48]         rlca
039B: 6F       [52]         ld	    l, a
039C: CDA103   [69]         call    seg0_writehex
039F: E1       [79]         pop	    hl
03A0: C9       [89]         ret
                        
                        ; void seg0_writehex(uint8_t val)
                        ; - write hex digit in lower nybble of "val" to 7-segment display
03A1:                   seg0_writehex::
03A1: E5       [11]         push    hl
03A2: C5       [22]         push    bc
03A3: 01D103   [32]         ld	    bc, hex2seg_table
03A6: 7D       [36]         ld	    a, l
03A7: E60F     [43]         and	    0xF	    ; mask off upper nybble of l
03A9: 6F       [47]         ld	    l, a
03AA: 2600     [54]         ld	    h, 0
03AC: 09       [65]         add	    hl, bc  ; hl = hex2seg_table + (val & 0xF)
03AD: 3A01FC   [78]         ld	    a, (Seg0_data)
03B0: E680     [85]         and	    SEG_DP
03B2: B6       [92]         or	    (hl)    ; a = (*Seg0_data & SEG_DP) | hex2seg_table[val & 0xF]
03B3: CDF103   [109]        call    seg0_write
03B6: C1       [119]        pop	    bc
03B7: E1       [129]        pop	    hl
03B8: C9       [139]        ret
                        
                        ; void seg1_writehex(uint8_t val)
                        ; - write hex digit in lower nybble of "val" to 7-segment display
03B9:                   seg1_writehex::
03B9: E5       [11]         push    hl
03BA: C5       [22]         push    bc
03BB: 01D103   [32]         ld	    bc, hex2seg_table
03BE: 7D       [36]         ld	    a, l
03BF: E60F     [43]         and	    0xF	    ; mask off upper nybble of l
03C1: 6F       [47]         ld	    l, a
03C2: 2600     [54]         ld	    h, 0
03C4: 09       [65]         add	    hl, bc  ; hl = hex2seg_table + (val & 0xF)
03C5: 3A02FC   [78]         ld	    a, (Seg1_data)
03C8: E680     [85]         and	    SEG_DP
03CA: B6       [92]         or	    (hl)    ; a = (*Seg1_data & SEG_DP) | hex2seg_table[val & 0xF]
03CB: CDF703   [109]        call    seg1_write
03CE: C1       [119]        pop	    bc
03CF: E1       [129]        pop	    hl
03D0: C9       [139]        ret
                        
03D1:                   hex2seg_table::
                            ; 0
03D1: 3F                    .byte SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F
                            ; 1
03D2: 06                    .byte SEG_B | SEG_C
                            ; 2
03D3: 5B                    .byte SEG_A | SEG_B | SEG_G | SEG_E | SEG_D
                            ; 3
03D4: 4F                    .byte SEG_A | SEG_B | SEG_G | SEG_C | SEG_D
                            ; 4
03D5: 66                    .byte SEG_F | SEG_G | SEG_B | SEG_C
                            ; 5
03D6: 6D                    .byte SEG_A | SEG_F | SEG_G | SEG_C | SEG_D
                            ; 6
03D7: 7D                    .byte SEG_A | SEG_F | SEG_G | SEG_C | SEG_D | SEG_E
                            ; 7
03D8: 07                    .byte SEG_A | SEG_B | SEG_C
                            ; 8
03D9: 7F                    .byte SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F | SEG_G
                            ; 9
03DA: 6F                    .byte SEG_A | SEG_B | SEG_C | SEG_D | SEG_F | SEG_G
                            ; A
03DB: 77                    .byte SEG_A | SEG_B | SEG_C | SEG_E | SEG_F | SEG_G
                            ; b
03DC: 7C                    .byte SEG_F | SEG_G | SEG_C | SEG_D | SEG_E
                            ; C
03DD: 39                    .byte SEG_A | SEG_D | SEG_E | SEG_F
                            ; d
03DE: 5E                    .byte SEG_B | SEG_C | SEG_D | SEG_E | SEG_G
                            ; E
03DF: 79                    .byte SEG_A | SEG_D | SEG_E | SEG_F | SEG_G
                            ; F
03E0: 71                    .byte SEG_A | SEG_E | SEG_F | SEG_G
                        
                        ; void seg0_toggle(uint8_t bits)
                        ; - toggle specified bits of first 7-segment display register
03E1:                   seg0_toggle::
03E1: 3A01FC   [13]         ld	    a, (Seg0_data)
03E4: AD       [17]         xor	    l
03E5: CDF103   [34]         call    seg0_write
03E8: C9       [44]         ret
                        
                        ; void seg1_toggle(uint8_t bits)
                        ; - toggle specified bits of second 7-segment display register
03E9:                   seg1_toggle::
03E9: 3A02FC   [13]         ld	    a, (Seg1_data)
03EC: AD       [17]         xor	    l
03ED: CDF703   [34]         call    seg1_write
03F0: C9       [44]         ret
                        
                        ; void seg0_write(uint8_t bits)
                        ; - parameter passed in A
                        ; - write raw bits to first 7-segment display register
03F1:                   seg0_write::
03F1: 3201FC   [13]         ld	    (Seg0_data), a
03F4: D300     [24]         out	    (PORT_SEG0), a
03F6: C9       [34]         ret
                        
                        ; void seg1_write(uint8_t bits)
                        ; - parameter passed in A
                        ; - write raw bits to second 7-segment display register
03F7:                   seg1_write::
03F7: 3202FC   [13]         ld	    (Seg1_data), a
03FA: D310     [24]         out	    (PORT_SEG1), a
03FC: C9       [34]         ret
                        
                        ; void delay_ms(uint8_t ms)
                        ; - delay for at least the specified number of milliseconds
                        #local
03FD:                   delay_ms::
03FD: 2C       [ 4]         inc	    l
03FE: 2D       [ 8]         dec	    l
03FF: C8       [13|19]      ret	    z		; delay of 0 returns immediately
0400: C5       [24]         push    bc
0401: 45       [28]         ld	    b, l
0402:                   loop:
0402: CD0904   [17]         call    delay_1ms
0405: 10FB     [25|30]      djnz    loop
0407: C1       [35]         pop	    bc
0408: C9       [45]         ret
                        #endlocal
                        
                        ; void delay_1ms()
                        ; - delay for 1ms (technically, 0.9999ms)
                        #local
0409:                   delay_1ms::
0409: C5       [11]         push    bc		; 11 T-states
                        ; To delay 1ms, we want to wait 10,000 T-states (@10MHz)
                        ; The loop is (38*b + 13*(b-1) + 8) T-states long
                        ; Rearranging: 51*b - 5
                        ; Solve for b: b = (10000 + 5 / 51) = 196.17
040A: 06C3     [18]         ld	    b, 195	; 7 T-states
040C:                   loop:
040C: DD7E01   [19]         ld	    a, (ix+1)	; 19 T-states
040F: DD7E01   [38]         ld	    a, (ix+1)	; 19 T-states
0412: 10F8     [46|51]      djnz    loop	; (b-1)*13+8 T-states
0414: C1       [56]         pop	    bc		; 10 T-states
0415: 00       [60]         nop			; 4 T-states
0416: C9       [70]         ret			; 10 T-states
                        ; We also assume the routine is CALLed, for 17 T-states.
                        ; Total delay is therefore:
                        ;   17 + 11 + 7 + 51*195 - 5 + 10 + 4 + 10 = 9,999
                        #endlocal
                        
                        ; Remaining 48KB and 64KB segments to fill up ROM image
0000:                   #code FILLER1, 0, 0xC000
0000:                   #code FILLER2, 0, 0x10000


total time: 0.0134 sec.
no errors
